
code16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000974  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000974  00000a08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007e  0080007e  00000a26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001842  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b36  00000000  00000000  0000247e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c64  00000000  00000000  00002fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00003c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e4  00000000  00000000  00003fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d6c  00000000  00000000  000045b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000531c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_1>
   8:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e7 03 	call	0x7ce	; 0x7ce <main>
  8a:	0c 94 b8 04 	jmp	0x970	; 0x970 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Sev_Init>:
	0b00000111, // 7 -> a b c
	0b01111111, // 8 -> all
	0b01101111  // 9 -> a b c d f g
};

void Sev_Init(void) {
  92:	cf 93       	push	r28
	/* assume PORTC pins 0..6 are used for segments a..g */
	for (uint8_t i = 0; i <= 6; ++i) {
  94:	c0 e0       	ldi	r28, 0x00	; 0
  96:	06 c0       	rjmp	.+12     	; 0xa4 <Sev_Init+0x12>
		DIO_init(PORT_C, i, OUTPUT);
  98:	41 e0       	ldi	r20, 0x01	; 1
  9a:	6c 2f       	mov	r22, r28
  9c:	83 e4       	ldi	r24, 0x43	; 67
  9e:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_init>
	0b01101111  // 9 -> a b c d f g
};

void Sev_Init(void) {
	/* assume PORTC pins 0..6 are used for segments a..g */
	for (uint8_t i = 0; i <= 6; ++i) {
  a2:	cf 5f       	subi	r28, 0xFF	; 255
  a4:	c7 30       	cpi	r28, 0x07	; 7
  a6:	c0 f3       	brcs	.-16     	; 0x98 <Sev_Init+0x6>
  a8:	c0 e0       	ldi	r28, 0x00	; 0
  aa:	06 c0       	rjmp	.+12     	; 0xb8 <Sev_Init+0x26>
		DIO_init(PORT_C, i, OUTPUT);
	}
	/* clear segments */
	for (uint8_t i = 0; i <= 6; ++i) DIO_write(PORT_C, i, LOW);
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	6c 2f       	mov	r22, r28
  b0:	83 e4       	ldi	r24, 0x43	; 67
  b2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_write>
  b6:	cf 5f       	subi	r28, 0xFF	; 255
  b8:	c7 30       	cpi	r28, 0x07	; 7
  ba:	c0 f3       	brcs	.-16     	; 0xac <Sev_Init+0x1a>
}
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <Sev_DisplayNumber>:

void Sev_DisplayNumber(uint8_t num) {
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
	if (num > 9) num = 0;
  c4:	8a 30       	cpi	r24, 0x0A	; 10
  c6:	08 f0       	brcs	.+2      	; 0xca <Sev_DisplayNumber+0xa>
  c8:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t pattern = sev_map[num];
  ca:	e8 2f       	mov	r30, r24
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	ef 59       	subi	r30, 0x9F	; 159
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
  d2:	d0 81       	ld	r29, Z
	for (uint8_t bit = 0; bit <= 6; ++bit) {
  d4:	c0 e0       	ldi	r28, 0x00	; 0
  d6:	0e c0       	rjmp	.+28     	; 0xf4 <Sev_DisplayNumber+0x34>
		DIO_write(PORT_C, bit, (pattern >> bit) & 1);
  d8:	4d 2f       	mov	r20, r29
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	0c 2e       	mov	r0, r28
  de:	02 c0       	rjmp	.+4      	; 0xe4 <Sev_DisplayNumber+0x24>
  e0:	55 95       	asr	r21
  e2:	47 95       	ror	r20
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <Sev_DisplayNumber+0x20>
  e8:	41 70       	andi	r20, 0x01	; 1
  ea:	6c 2f       	mov	r22, r28
  ec:	83 e4       	ldi	r24, 0x43	; 67
  ee:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_write>
}

void Sev_DisplayNumber(uint8_t num) {
	if (num > 9) num = 0;
	uint8_t pattern = sev_map[num];
	for (uint8_t bit = 0; bit <= 6; ++bit) {
  f2:	cf 5f       	subi	r28, 0xFF	; 255
  f4:	c7 30       	cpi	r28, 0x07	; 7
  f6:	80 f3       	brcs	.-32     	; 0xd8 <Sev_DisplayNumber+0x18>
		DIO_write(PORT_C, bit, (pattern >> bit) & 1);
	}
}
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <DIO_init>:
void DIO_read(uint8_t port , uint8_t pinnumber , uint8_t *value){
	    switch (port) {
		    case PORT_A: *value = READ_BIT(PINA, pinnumber); break;
		    case PORT_B: *value = READ_BIT(PINB, pinnumber); break;
		    case PORT_C: *value = READ_BIT(PINC, pinnumber); break;
		    case PORT_D: *value = READ_BIT(PIND, pinnumber); break;
  fe:	82 34       	cpi	r24, 0x42	; 66
 100:	29 f1       	breq	.+74     	; 0x14c <DIO_init+0x4e>
 102:	18 f4       	brcc	.+6      	; 0x10a <DIO_init+0xc>
 104:	81 34       	cpi	r24, 0x41	; 65
 106:	39 f0       	breq	.+14     	; 0x116 <DIO_init+0x18>
 108:	08 95       	ret
 10a:	83 34       	cpi	r24, 0x43	; 67
 10c:	d1 f1       	breq	.+116    	; 0x182 <DIO_init+0x84>
 10e:	84 34       	cpi	r24, 0x44	; 68
 110:	09 f4       	brne	.+2      	; 0x114 <DIO_init+0x16>
 112:	52 c0       	rjmp	.+164    	; 0x1b8 <DIO_init+0xba>
 114:	08 95       	ret
 116:	41 30       	cpi	r20, 0x01	; 1
 118:	59 f4       	brne	.+22     	; 0x130 <DIO_init+0x32>
 11a:	2a b3       	in	r18, 0x1a	; 26
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_init+0x28>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_init+0x24>
 12a:	82 2b       	or	r24, r18
 12c:	8a bb       	out	0x1a, r24	; 26
 12e:	08 95       	ret
 130:	41 11       	cpse	r20, r1
 132:	5c c0       	rjmp	.+184    	; 0x1ec <DIO_init+0xee>
 134:	2a b3       	in	r18, 0x1a	; 26
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_init+0x42>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_init+0x3e>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	8a bb       	out	0x1a, r24	; 26
 14a:	08 95       	ret
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	59 f4       	brne	.+22     	; 0x166 <DIO_init+0x68>
 150:	27 b3       	in	r18, 0x17	; 23
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_init+0x5e>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_init+0x5a>
 160:	82 2b       	or	r24, r18
 162:	87 bb       	out	0x17, r24	; 23
 164:	08 95       	ret
 166:	41 11       	cpse	r20, r1
 168:	41 c0       	rjmp	.+130    	; 0x1ec <DIO_init+0xee>
 16a:	27 b3       	in	r18, 0x17	; 23
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_init+0x78>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_init+0x74>
 17a:	80 95       	com	r24
 17c:	82 23       	and	r24, r18
 17e:	87 bb       	out	0x17, r24	; 23
 180:	08 95       	ret
 182:	41 30       	cpi	r20, 0x01	; 1
 184:	59 f4       	brne	.+22     	; 0x19c <DIO_init+0x9e>
 186:	24 b3       	in	r18, 0x14	; 20
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_init+0x94>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_init+0x90>
 196:	82 2b       	or	r24, r18
 198:	84 bb       	out	0x14, r24	; 20
 19a:	08 95       	ret
 19c:	41 11       	cpse	r20, r1
 19e:	26 c0       	rjmp	.+76     	; 0x1ec <DIO_init+0xee>
 1a0:	24 b3       	in	r18, 0x14	; 20
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_init+0xae>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_init+0xaa>
 1b0:	80 95       	com	r24
 1b2:	82 23       	and	r24, r18
 1b4:	84 bb       	out	0x14, r24	; 20
 1b6:	08 95       	ret
 1b8:	41 30       	cpi	r20, 0x01	; 1
 1ba:	59 f4       	brne	.+22     	; 0x1d2 <DIO_init+0xd4>
 1bc:	21 b3       	in	r18, 0x11	; 17
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_init+0xca>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_init+0xc6>
 1cc:	82 2b       	or	r24, r18
 1ce:	81 bb       	out	0x11, r24	; 17
 1d0:	08 95       	ret
 1d2:	41 11       	cpse	r20, r1
 1d4:	0b c0       	rjmp	.+22     	; 0x1ec <DIO_init+0xee>
 1d6:	21 b3       	in	r18, 0x11	; 17
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_init+0xe4>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_init+0xe0>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	81 bb       	out	0x11, r24	; 17
 1ec:	08 95       	ret

000001ee <DIO_write>:
 1ee:	82 34       	cpi	r24, 0x42	; 66
 1f0:	29 f1       	breq	.+74     	; 0x23c <DIO_write+0x4e>
 1f2:	18 f4       	brcc	.+6      	; 0x1fa <DIO_write+0xc>
 1f4:	81 34       	cpi	r24, 0x41	; 65
 1f6:	39 f0       	breq	.+14     	; 0x206 <DIO_write+0x18>
 1f8:	08 95       	ret
 1fa:	83 34       	cpi	r24, 0x43	; 67
 1fc:	d1 f1       	breq	.+116    	; 0x272 <DIO_write+0x84>
 1fe:	84 34       	cpi	r24, 0x44	; 68
 200:	09 f4       	brne	.+2      	; 0x204 <DIO_write+0x16>
 202:	52 c0       	rjmp	.+164    	; 0x2a8 <DIO_write+0xba>
 204:	08 95       	ret
 206:	41 30       	cpi	r20, 0x01	; 1
 208:	59 f4       	brne	.+22     	; 0x220 <DIO_write+0x32>
 20a:	2b b3       	in	r18, 0x1b	; 27
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_write+0x28>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_write+0x24>
 21a:	82 2b       	or	r24, r18
 21c:	8b bb       	out	0x1b, r24	; 27
 21e:	08 95       	ret
 220:	41 11       	cpse	r20, r1
 222:	5c c0       	rjmp	.+184    	; 0x2dc <DIO_write+0xee>
 224:	2b b3       	in	r18, 0x1b	; 27
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_write+0x42>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_write+0x3e>
 234:	80 95       	com	r24
 236:	82 23       	and	r24, r18
 238:	8b bb       	out	0x1b, r24	; 27
 23a:	08 95       	ret
 23c:	41 30       	cpi	r20, 0x01	; 1
 23e:	59 f4       	brne	.+22     	; 0x256 <DIO_write+0x68>
 240:	28 b3       	in	r18, 0x18	; 24
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_write+0x5e>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_write+0x5a>
 250:	82 2b       	or	r24, r18
 252:	88 bb       	out	0x18, r24	; 24
 254:	08 95       	ret
 256:	41 11       	cpse	r20, r1
 258:	41 c0       	rjmp	.+130    	; 0x2dc <DIO_write+0xee>
 25a:	28 b3       	in	r18, 0x18	; 24
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_write+0x78>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_write+0x74>
 26a:	80 95       	com	r24
 26c:	82 23       	and	r24, r18
 26e:	88 bb       	out	0x18, r24	; 24
 270:	08 95       	ret
 272:	41 30       	cpi	r20, 0x01	; 1
 274:	59 f4       	brne	.+22     	; 0x28c <DIO_write+0x9e>
 276:	25 b3       	in	r18, 0x15	; 21
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_write+0x94>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_write+0x90>
 286:	82 2b       	or	r24, r18
 288:	85 bb       	out	0x15, r24	; 21
 28a:	08 95       	ret
 28c:	41 11       	cpse	r20, r1
 28e:	26 c0       	rjmp	.+76     	; 0x2dc <DIO_write+0xee>
 290:	25 b3       	in	r18, 0x15	; 21
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_write+0xae>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_write+0xaa>
 2a0:	80 95       	com	r24
 2a2:	82 23       	and	r24, r18
 2a4:	85 bb       	out	0x15, r24	; 21
 2a6:	08 95       	ret
 2a8:	41 30       	cpi	r20, 0x01	; 1
 2aa:	59 f4       	brne	.+22     	; 0x2c2 <DIO_write+0xd4>
 2ac:	22 b3       	in	r18, 0x12	; 18
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_write+0xca>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_write+0xc6>
 2bc:	82 2b       	or	r24, r18
 2be:	82 bb       	out	0x12, r24	; 18
 2c0:	08 95       	ret
 2c2:	41 11       	cpse	r20, r1
 2c4:	0b c0       	rjmp	.+22     	; 0x2dc <DIO_write+0xee>
 2c6:	22 b3       	in	r18, 0x12	; 18
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_write+0xe4>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_write+0xe0>
 2d6:	80 95       	com	r24
 2d8:	82 23       	and	r24, r18
 2da:	82 bb       	out	0x12, r24	; 18
 2dc:	08 95       	ret

000002de <DIO_toggle>:



  void DIO_toggle(uint8_t port , uint8_t pinnumber ){
	  
	    switch (port){
 2de:	82 34       	cpi	r24, 0x42	; 66
 2e0:	a1 f0       	breq	.+40     	; 0x30a <DIO_toggle+0x2c>
 2e2:	18 f4       	brcc	.+6      	; 0x2ea <DIO_toggle+0xc>
 2e4:	81 34       	cpi	r24, 0x41	; 65
 2e6:	31 f0       	breq	.+12     	; 0x2f4 <DIO_toggle+0x16>
 2e8:	08 95       	ret
 2ea:	83 34       	cpi	r24, 0x43	; 67
 2ec:	c9 f0       	breq	.+50     	; 0x320 <DIO_toggle+0x42>
 2ee:	84 34       	cpi	r24, 0x44	; 68
 2f0:	11 f1       	breq	.+68     	; 0x336 <DIO_toggle+0x58>
 2f2:	08 95       	ret
		  case PORT_A : 
		    TOGGLE_BIT (PORTA,pinnumber);
 2f4:	2b b3       	in	r18, 0x1b	; 27
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_toggle+0x22>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_toggle+0x1e>
 304:	82 27       	eor	r24, r18
 306:	8b bb       	out	0x1b, r24	; 27
			break;
 308:	08 95       	ret
		  case PORT_B :
		    TOGGLE_BIT(PORTB,pinnumber);
 30a:	28 b3       	in	r18, 0x18	; 24
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_toggle+0x38>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_toggle+0x34>
 31a:	82 27       	eor	r24, r18
 31c:	88 bb       	out	0x18, r24	; 24
			break;
 31e:	08 95       	ret
		  case PORT_C :
		    TOGGLE_BIT(PORTC,pinnumber);
 320:	25 b3       	in	r18, 0x15	; 21
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_toggle+0x4e>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_toggle+0x4a>
 330:	82 27       	eor	r24, r18
 332:	85 bb       	out	0x15, r24	; 21
			break;
 334:	08 95       	ret
		  case PORT_D :
		    TOGGLE_BIT(PORTD,pinnumber);
 336:	22 b3       	in	r18, 0x12	; 18
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_toggle+0x64>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	6a 95       	dec	r22
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_toggle+0x60>
 346:	82 27       	eor	r24, r18
 348:	82 bb       	out	0x12, r24	; 18
 34a:	08 95       	ret

0000034c <EXTI0_voidInit>:
	sei(); /* enable global interrupts */
}

void EXTI0_voidDisable(void)
{
	GICR &= ~(1<<INT0);
 34c:	95 b7       	in	r25, 0x35	; 53
 34e:	9c 7f       	andi	r25, 0xFC	; 252
 350:	95 bf       	out	0x35, r25	; 53
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	31 f0       	breq	.+12     	; 0x362 <EXTI0_voidInit+0x16>
 356:	a0 f0       	brcs	.+40     	; 0x380 <EXTI0_voidInit+0x34>
 358:	82 30       	cpi	r24, 0x02	; 2
 35a:	39 f0       	breq	.+14     	; 0x36a <EXTI0_voidInit+0x1e>
 35c:	83 30       	cpi	r24, 0x03	; 3
 35e:	49 f0       	breq	.+18     	; 0x372 <EXTI0_voidInit+0x26>
 360:	0c c0       	rjmp	.+24     	; 0x37a <EXTI0_voidInit+0x2e>
 362:	85 b7       	in	r24, 0x35	; 53
 364:	81 60       	ori	r24, 0x01	; 1
 366:	85 bf       	out	0x35, r24	; 53
 368:	0b c0       	rjmp	.+22     	; 0x380 <EXTI0_voidInit+0x34>
 36a:	85 b7       	in	r24, 0x35	; 53
 36c:	82 60       	ori	r24, 0x02	; 2
 36e:	85 bf       	out	0x35, r24	; 53
 370:	07 c0       	rjmp	.+14     	; 0x380 <EXTI0_voidInit+0x34>
 372:	85 b7       	in	r24, 0x35	; 53
 374:	83 60       	ori	r24, 0x03	; 3
 376:	85 bf       	out	0x35, r24	; 53
 378:	03 c0       	rjmp	.+6      	; 0x380 <EXTI0_voidInit+0x34>
 37a:	85 b7       	in	r24, 0x35	; 53
 37c:	82 60       	ori	r24, 0x02	; 2
 37e:	85 bf       	out	0x35, r24	; 53
 380:	8a b7       	in	r24, 0x3a	; 58
 382:	80 64       	ori	r24, 0x40	; 64
 384:	8a bf       	out	0x3a, r24	; 58
 386:	08 95       	ret

00000388 <EXTI0_voidEnable>:
 388:	8b b7       	in	r24, 0x3b	; 59
 38a:	80 64       	ori	r24, 0x40	; 64
 38c:	8b bf       	out	0x3b, r24	; 59
 38e:	78 94       	sei
 390:	08 95       	ret

00000392 <EXTI0_voidSetCallBack>:
}

void EXTI0_voidSetCallBack(void (*pf)(void))
{
	EXTI0_PfCallback = pf;
 392:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <__data_end+0x1>
 396:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
 39a:	08 95       	ret

0000039c <__vector_1>:
}

ISR(INT0_vect)
{
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	0f 92       	push	r0
 3a4:	11 24       	eor	r1, r1
 3a6:	2f 93       	push	r18
 3a8:	3f 93       	push	r19
 3aa:	4f 93       	push	r20
 3ac:	5f 93       	push	r21
 3ae:	6f 93       	push	r22
 3b0:	7f 93       	push	r23
 3b2:	8f 93       	push	r24
 3b4:	9f 93       	push	r25
 3b6:	af 93       	push	r26
 3b8:	bf 93       	push	r27
 3ba:	ef 93       	push	r30
 3bc:	ff 93       	push	r31
	if (EXTI0_PfCallback) EXTI0_PfCallback();
 3be:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <__data_end>
 3c2:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <__data_end+0x1>
 3c6:	30 97       	sbiw	r30, 0x00	; 0
 3c8:	09 f0       	breq	.+2      	; 0x3cc <__vector_1+0x30>
 3ca:	09 95       	icall
}
 3cc:	ff 91       	pop	r31
 3ce:	ef 91       	pop	r30
 3d0:	bf 91       	pop	r27
 3d2:	af 91       	pop	r26
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	7f 91       	pop	r23
 3da:	6f 91       	pop	r22
 3dc:	5f 91       	pop	r21
 3de:	4f 91       	pop	r20
 3e0:	3f 91       	pop	r19
 3e2:	2f 91       	pop	r18
 3e4:	0f 90       	pop	r0
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	0f 90       	pop	r0
 3ea:	1f 90       	pop	r1
 3ec:	18 95       	reti

000003ee <EXTI1_voidInit>:
	sei();
}

void EXTI1_voidDisable(void)
{
	GICR &= ~(1<<INT1);
 3ee:	95 b7       	in	r25, 0x35	; 53
 3f0:	93 7f       	andi	r25, 0xF3	; 243
 3f2:	95 bf       	out	0x35, r25	; 53
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	31 f0       	breq	.+12     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3f8:	a0 f0       	brcs	.+40     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3fa:	82 30       	cpi	r24, 0x02	; 2
 3fc:	39 f0       	breq	.+14     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3fe:	83 30       	cpi	r24, 0x03	; 3
 400:	49 f0       	breq	.+18     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 402:	0c c0       	rjmp	.+24     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 404:	85 b7       	in	r24, 0x35	; 53
 406:	84 60       	ori	r24, 0x04	; 4
 408:	85 bf       	out	0x35, r24	; 53
 40a:	0b c0       	rjmp	.+22     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 40c:	85 b7       	in	r24, 0x35	; 53
 40e:	88 60       	ori	r24, 0x08	; 8
 410:	85 bf       	out	0x35, r24	; 53
 412:	07 c0       	rjmp	.+14     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 414:	85 b7       	in	r24, 0x35	; 53
 416:	8c 60       	ori	r24, 0x0C	; 12
 418:	85 bf       	out	0x35, r24	; 53
 41a:	03 c0       	rjmp	.+6      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41c:	85 b7       	in	r24, 0x35	; 53
 41e:	88 60       	ori	r24, 0x08	; 8
 420:	85 bf       	out	0x35, r24	; 53
 422:	8a b7       	in	r24, 0x3a	; 58
 424:	80 68       	ori	r24, 0x80	; 128
 426:	8a bf       	out	0x3a, r24	; 58
 428:	08 95       	ret

0000042a <EXTI1_voidEnable>:
 42a:	8b b7       	in	r24, 0x3b	; 59
 42c:	80 68       	ori	r24, 0x80	; 128
 42e:	8b bf       	out	0x3b, r24	; 59
 430:	78 94       	sei
 432:	08 95       	ret

00000434 <EXTI1_voidSetCallBack>:
}

void EXTI1_voidSetCallBack(void (*pf)(void))
{
	EXTI1_PfCallback = pf;
 434:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <EXTI1_PfCallback+0x1>
 438:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <EXTI1_PfCallback>
 43c:	08 95       	ret

0000043e <__vector_2>:
}

ISR(INT1_vect)
{
 43e:	1f 92       	push	r1
 440:	0f 92       	push	r0
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	0f 92       	push	r0
 446:	11 24       	eor	r1, r1
 448:	2f 93       	push	r18
 44a:	3f 93       	push	r19
 44c:	4f 93       	push	r20
 44e:	5f 93       	push	r21
 450:	6f 93       	push	r22
 452:	7f 93       	push	r23
 454:	8f 93       	push	r24
 456:	9f 93       	push	r25
 458:	af 93       	push	r26
 45a:	bf 93       	push	r27
 45c:	ef 93       	push	r30
 45e:	ff 93       	push	r31
	if (EXTI1_PfCallback) EXTI1_PfCallback();
 460:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <EXTI1_PfCallback>
 464:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <EXTI1_PfCallback+0x1>
 468:	30 97       	sbiw	r30, 0x00	; 0
 46a:	09 f0       	breq	.+2      	; 0x46e <__vector_2+0x30>
 46c:	09 95       	icall
}
 46e:	ff 91       	pop	r31
 470:	ef 91       	pop	r30
 472:	bf 91       	pop	r27
 474:	af 91       	pop	r26
 476:	9f 91       	pop	r25
 478:	8f 91       	pop	r24
 47a:	7f 91       	pop	r23
 47c:	6f 91       	pop	r22
 47e:	5f 91       	pop	r21
 480:	4f 91       	pop	r20
 482:	3f 91       	pop	r19
 484:	2f 91       	pop	r18
 486:	0f 90       	pop	r0
 488:	0f be       	out	0x3f, r0	; 63
 48a:	0f 90       	pop	r0
 48c:	1f 90       	pop	r1
 48e:	18 95       	reti

00000490 <LCD_EnablePulse>:
// -----------------------------------------
void LCD_SetPosition(uint8_t Row, uint8_t Col) {
    uint8_t address;
    if (Row == 0) address = 0x00 + Col;
    else          address = 0x40 + Col;
    LCD_SendCommand(lcd_SetCursor | address);
 490:	41 e0       	ldi	r20, 0x01	; 1
 492:	62 e0       	ldi	r22, 0x02	; 2
 494:	81 e4       	ldi	r24, 0x41	; 65
 496:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_write>
 49a:	00 00       	nop
 49c:	40 e0       	ldi	r20, 0x00	; 0
 49e:	62 e0       	ldi	r22, 0x02	; 2
 4a0:	81 e4       	ldi	r24, 0x41	; 65
 4a2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_write>
 4a6:	83 ef       	ldi	r24, 0xF3	; 243
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <LCD_EnablePulse+0x1a>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <LCD_EnablePulse+0x20>
 4b0:	00 00       	nop
 4b2:	08 95       	ret

000004b4 <LCD_WriteBus>:
 4b4:	cf 93       	push	r28
 4b6:	c8 2f       	mov	r28, r24
 4b8:	48 2f       	mov	r20, r24
 4ba:	41 70       	andi	r20, 0x01	; 1
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	82 e4       	ldi	r24, 0x42	; 66
 4c0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_write>
 4c4:	c1 fb       	bst	r28, 1
 4c6:	44 27       	eor	r20, r20
 4c8:	40 f9       	bld	r20, 0
 4ca:	61 e0       	ldi	r22, 0x01	; 1
 4cc:	82 e4       	ldi	r24, 0x42	; 66
 4ce:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_write>
 4d2:	c2 fb       	bst	r28, 2
 4d4:	44 27       	eor	r20, r20
 4d6:	40 f9       	bld	r20, 0
 4d8:	62 e0       	ldi	r22, 0x02	; 2
 4da:	82 e4       	ldi	r24, 0x42	; 66
 4dc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_write>
 4e0:	c3 fb       	bst	r28, 3
 4e2:	44 27       	eor	r20, r20
 4e4:	40 f9       	bld	r20, 0
 4e6:	63 e0       	ldi	r22, 0x03	; 3
 4e8:	82 e4       	ldi	r24, 0x42	; 66
 4ea:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_write>
 4ee:	c4 fb       	bst	r28, 4
 4f0:	44 27       	eor	r20, r20
 4f2:	40 f9       	bld	r20, 0
 4f4:	64 e0       	ldi	r22, 0x04	; 4
 4f6:	82 e4       	ldi	r24, 0x42	; 66
 4f8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_write>
 4fc:	c5 fb       	bst	r28, 5
 4fe:	44 27       	eor	r20, r20
 500:	40 f9       	bld	r20, 0
 502:	65 e0       	ldi	r22, 0x05	; 5
 504:	82 e4       	ldi	r24, 0x42	; 66
 506:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_write>
 50a:	c6 fb       	bst	r28, 6
 50c:	44 27       	eor	r20, r20
 50e:	40 f9       	bld	r20, 0
 510:	66 e0       	ldi	r22, 0x06	; 6
 512:	82 e4       	ldi	r24, 0x42	; 66
 514:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_write>
 518:	4c 2f       	mov	r20, r28
 51a:	44 1f       	adc	r20, r20
 51c:	44 27       	eor	r20, r20
 51e:	44 1f       	adc	r20, r20
 520:	67 e0       	ldi	r22, 0x07	; 7
 522:	82 e4       	ldi	r24, 0x42	; 66
 524:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_write>
 528:	0e 94 48 02 	call	0x490	; 0x490 <LCD_EnablePulse>
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <LCD_SendCommand>:
 530:	cf 93       	push	r28
 532:	c8 2f       	mov	r28, r24
 534:	40 e0       	ldi	r20, 0x00	; 0
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	81 e4       	ldi	r24, 0x41	; 65
 53a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_write>
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	81 e4       	ldi	r24, 0x41	; 65
 544:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_write>
 548:	8c 2f       	mov	r24, r28
 54a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <LCD_WriteBus>
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <LCD_SendData>:
 552:	cf 93       	push	r28
 554:	c8 2f       	mov	r28, r24
 556:	41 e0       	ldi	r20, 0x01	; 1
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	81 e4       	ldi	r24, 0x41	; 65
 55c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_write>
 560:	40 e0       	ldi	r20, 0x00	; 0
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	81 e4       	ldi	r24, 0x41	; 65
 566:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_write>
 56a:	8c 2f       	mov	r24, r28
 56c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <LCD_WriteBus>
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <LCD_Init>:
 574:	41 e0       	ldi	r20, 0x01	; 1
 576:	60 e0       	ldi	r22, 0x00	; 0
 578:	81 e4       	ldi	r24, 0x41	; 65
 57a:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_init>
 57e:	41 e0       	ldi	r20, 0x01	; 1
 580:	61 e0       	ldi	r22, 0x01	; 1
 582:	81 e4       	ldi	r24, 0x41	; 65
 584:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_init>
 588:	41 e0       	ldi	r20, 0x01	; 1
 58a:	62 e0       	ldi	r22, 0x02	; 2
 58c:	81 e4       	ldi	r24, 0x41	; 65
 58e:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_init>
 592:	41 e0       	ldi	r20, 0x01	; 1
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	82 e4       	ldi	r24, 0x42	; 66
 598:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_init>
 59c:	41 e0       	ldi	r20, 0x01	; 1
 59e:	61 e0       	ldi	r22, 0x01	; 1
 5a0:	82 e4       	ldi	r24, 0x42	; 66
 5a2:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_init>
 5a6:	41 e0       	ldi	r20, 0x01	; 1
 5a8:	62 e0       	ldi	r22, 0x02	; 2
 5aa:	82 e4       	ldi	r24, 0x42	; 66
 5ac:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_init>
 5b0:	41 e0       	ldi	r20, 0x01	; 1
 5b2:	63 e0       	ldi	r22, 0x03	; 3
 5b4:	82 e4       	ldi	r24, 0x42	; 66
 5b6:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_init>
 5ba:	41 e0       	ldi	r20, 0x01	; 1
 5bc:	64 e0       	ldi	r22, 0x04	; 4
 5be:	82 e4       	ldi	r24, 0x42	; 66
 5c0:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_init>
 5c4:	41 e0       	ldi	r20, 0x01	; 1
 5c6:	65 e0       	ldi	r22, 0x05	; 5
 5c8:	82 e4       	ldi	r24, 0x42	; 66
 5ca:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_init>
 5ce:	41 e0       	ldi	r20, 0x01	; 1
 5d0:	66 e0       	ldi	r22, 0x06	; 6
 5d2:	82 e4       	ldi	r24, 0x42	; 66
 5d4:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_init>
 5d8:	41 e0       	ldi	r20, 0x01	; 1
 5da:	67 e0       	ldi	r22, 0x07	; 7
 5dc:	82 e4       	ldi	r24, 0x42	; 66
 5de:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_init>
 5e2:	87 e8       	ldi	r24, 0x87	; 135
 5e4:	93 e1       	ldi	r25, 0x13	; 19
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <LCD_Init+0x72>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <LCD_Init+0x78>
 5ec:	00 00       	nop
 5ee:	88 e3       	ldi	r24, 0x38	; 56
 5f0:	0e 94 98 02 	call	0x530	; 0x530 <LCD_SendCommand>
 5f4:	89 ef       	ldi	r24, 0xF9	; 249
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	01 97       	sbiw	r24, 0x01	; 1
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <LCD_Init+0x84>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <LCD_Init+0x8a>
 5fe:	00 00       	nop
 600:	8c e0       	ldi	r24, 0x0C	; 12
 602:	0e 94 98 02 	call	0x530	; 0x530 <LCD_SendCommand>
 606:	89 ef       	ldi	r24, 0xF9	; 249
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <LCD_Init+0x96>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <LCD_Init+0x9c>
 610:	00 00       	nop
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	0e 94 98 02 	call	0x530	; 0x530 <LCD_SendCommand>
 618:	83 ef       	ldi	r24, 0xF3	; 243
 61a:	91 e0       	ldi	r25, 0x01	; 1
 61c:	01 97       	sbiw	r24, 0x01	; 1
 61e:	f1 f7       	brne	.-4      	; 0x61c <LCD_Init+0xa8>
 620:	00 c0       	rjmp	.+0      	; 0x622 <LCD_Init+0xae>
 622:	00 00       	nop
 624:	86 e0       	ldi	r24, 0x06	; 6
 626:	0e 94 98 02 	call	0x530	; 0x530 <LCD_SendCommand>
 62a:	89 ef       	ldi	r24, 0xF9	; 249
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	01 97       	sbiw	r24, 0x01	; 1
 630:	f1 f7       	brne	.-4      	; 0x62e <LCD_Init+0xba>
 632:	00 c0       	rjmp	.+0      	; 0x634 <LCD_Init+0xc0>
 634:	00 00       	nop
 636:	08 95       	ret

00000638 <LCD_ClearScreen>:
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	0e 94 98 02 	call	0x530	; 0x530 <LCD_SendCommand>
 63e:	83 ef       	ldi	r24, 0xF3	; 243
 640:	91 e0       	ldi	r25, 0x01	; 1
 642:	01 97       	sbiw	r24, 0x01	; 1
 644:	f1 f7       	brne	.-4      	; 0x642 <LCD_ClearScreen+0xa>
 646:	00 c0       	rjmp	.+0      	; 0x648 <LCD_ClearScreen+0x10>
 648:	00 00       	nop
 64a:	08 95       	ret

0000064c <LCD_SendString>:
}

// -----------------------------------------
// Send string
// -----------------------------------------
void LCD_SendString(const uint8_t *ptrString) {
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	ec 01       	movw	r28, r24
    while (*ptrString) {
 652:	03 c0       	rjmp	.+6      	; 0x65a <LCD_SendString+0xe>
        LCD_SendData(*ptrString++);
 654:	21 96       	adiw	r28, 0x01	; 1
 656:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_SendData>

// -----------------------------------------
// Send string
// -----------------------------------------
void LCD_SendString(const uint8_t *ptrString) {
    while (*ptrString) {
 65a:	88 81       	ld	r24, Y
 65c:	81 11       	cpse	r24, r1
 65e:	fa cf       	rjmp	.-12     	; 0x654 <LCD_SendString+0x8>
        LCD_SendData(*ptrString++);
    }
}
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	08 95       	ret

00000666 <LCD_SendNumber>:

// -----------------------------------------
// Send number
// -----------------------------------------
void LCD_SendNumber(uint64_t Number) {
 666:	2f 92       	push	r2
 668:	3f 92       	push	r3
 66a:	4f 92       	push	r4
 66c:	5f 92       	push	r5
 66e:	6f 92       	push	r6
 670:	7f 92       	push	r7
 672:	8f 92       	push	r8
 674:	9f 92       	push	r9
 676:	af 92       	push	r10
 678:	bf 92       	push	r11
 67a:	cf 92       	push	r12
 67c:	df 92       	push	r13
 67e:	ef 92       	push	r14
 680:	ff 92       	push	r15
 682:	0f 93       	push	r16
 684:	1f 93       	push	r17
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	cd b7       	in	r28, 0x3d	; 61
 68c:	de b7       	in	r29, 0x3e	; 62
 68e:	67 97       	sbiw	r28, 0x17	; 23
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	f8 94       	cli
 694:	de bf       	out	0x3e, r29	; 62
 696:	0f be       	out	0x3f, r0	; 63
 698:	cd bf       	out	0x3d, r28	; 61
 69a:	2d 8b       	std	Y+21, r18	; 0x15
 69c:	3e 8b       	std	Y+22, r19	; 0x16
 69e:	74 2e       	mov	r7, r20
 6a0:	65 2e       	mov	r6, r21
 6a2:	56 2e       	mov	r5, r22
 6a4:	47 2e       	mov	r4, r23
 6a6:	38 2e       	mov	r3, r24
 6a8:	29 2e       	mov	r2, r25
    char buffer[20];
    uint8_t i = 0;

    if (Number == 0) {
 6aa:	a0 e0       	ldi	r26, 0x00	; 0
 6ac:	0e 94 ac 04 	call	0x958	; 0x958 <__cmpdi2_s8>
 6b0:	c9 f5       	brne	.+114    	; 0x724 <LCD_SendNumber+0xbe>
        LCD_SendData('0');
 6b2:	80 e3       	ldi	r24, 0x30	; 48
 6b4:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_SendData>
 6b8:	50 c0       	rjmp	.+160    	; 0x75a <LCD_SendNumber+0xf4>
        return;
    }

    while (Number > 0) {
        buffer[i++] = (Number % 10) + '0';
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	88 0d       	add	r24, r8
 6be:	8f 8b       	std	Y+23, r24	; 0x17
 6c0:	91 2c       	mov	r9, r1
 6c2:	0f 2e       	mov	r0, r31
 6c4:	fa e0       	ldi	r31, 0x0A	; 10
 6c6:	af 2e       	mov	r10, r31
 6c8:	f0 2d       	mov	r31, r0
 6ca:	b1 2c       	mov	r11, r1
 6cc:	c1 2c       	mov	r12, r1
 6ce:	d1 2c       	mov	r13, r1
 6d0:	e1 2c       	mov	r14, r1
 6d2:	f1 2c       	mov	r15, r1
 6d4:	00 e0       	ldi	r16, 0x00	; 0
 6d6:	10 e0       	ldi	r17, 0x00	; 0
 6d8:	2d 89       	ldd	r18, Y+21	; 0x15
 6da:	3e 89       	ldd	r19, Y+22	; 0x16
 6dc:	47 2d       	mov	r20, r7
 6de:	56 2d       	mov	r21, r6
 6e0:	65 2d       	mov	r22, r5
 6e2:	74 2d       	mov	r23, r4
 6e4:	83 2d       	mov	r24, r3
 6e6:	92 2d       	mov	r25, r2
 6e8:	0e 94 4d 04 	call	0x89a	; 0x89a <__umoddi3>
 6ec:	e1 e0       	ldi	r30, 0x01	; 1
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	ec 0f       	add	r30, r28
 6f2:	fd 1f       	adc	r31, r29
 6f4:	e8 0d       	add	r30, r8
 6f6:	f9 1d       	adc	r31, r9
 6f8:	20 5d       	subi	r18, 0xD0	; 208
 6fa:	20 83       	st	Z, r18
        Number /= 10;
 6fc:	2d 89       	ldd	r18, Y+21	; 0x15
 6fe:	3e 89       	ldd	r19, Y+22	; 0x16
 700:	47 2d       	mov	r20, r7
 702:	56 2d       	mov	r21, r6
 704:	65 2d       	mov	r22, r5
 706:	74 2d       	mov	r23, r4
 708:	83 2d       	mov	r24, r3
 70a:	92 2d       	mov	r25, r2
 70c:	0e 94 4f 04 	call	0x89e	; 0x89e <__udivdi3>
 710:	2d 8b       	std	Y+21, r18	; 0x15
 712:	3e 8b       	std	Y+22, r19	; 0x16
 714:	74 2e       	mov	r7, r20
 716:	65 2e       	mov	r6, r21
 718:	56 2e       	mov	r5, r22
 71a:	47 2e       	mov	r4, r23
 71c:	38 2e       	mov	r3, r24
 71e:	29 2e       	mov	r2, r25
        LCD_SendData('0');
        return;
    }

    while (Number > 0) {
        buffer[i++] = (Number % 10) + '0';
 720:	8f 88       	ldd	r8, Y+23	; 0x17
 722:	01 c0       	rjmp	.+2      	; 0x726 <LCD_SendNumber+0xc0>
 724:	81 2c       	mov	r8, r1
    if (Number == 0) {
        LCD_SendData('0');
        return;
    }

    while (Number > 0) {
 726:	2d 89       	ldd	r18, Y+21	; 0x15
 728:	3e 89       	ldd	r19, Y+22	; 0x16
 72a:	47 2d       	mov	r20, r7
 72c:	56 2d       	mov	r21, r6
 72e:	65 2d       	mov	r22, r5
 730:	74 2d       	mov	r23, r4
 732:	83 2d       	mov	r24, r3
 734:	92 2d       	mov	r25, r2
 736:	a0 e0       	ldi	r26, 0x00	; 0
 738:	0e 94 ac 04 	call	0x958	; 0x958 <__cmpdi2_s8>
 73c:	09 f0       	breq	.+2      	; 0x740 <LCD_SendNumber+0xda>
 73e:	bd cf       	rjmp	.-134    	; 0x6ba <LCD_SendNumber+0x54>
 740:	0a c0       	rjmp	.+20     	; 0x756 <LCD_SendNumber+0xf0>
        buffer[i++] = (Number % 10) + '0';
        Number /= 10;
    }

    while (i > 0) {
        LCD_SendData(buffer[--i]);
 742:	8a 94       	dec	r8
 744:	e1 e0       	ldi	r30, 0x01	; 1
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	ec 0f       	add	r30, r28
 74a:	fd 1f       	adc	r31, r29
 74c:	e8 0d       	add	r30, r8
 74e:	f1 1d       	adc	r31, r1
 750:	80 81       	ld	r24, Z
 752:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_SendData>
    while (Number > 0) {
        buffer[i++] = (Number % 10) + '0';
        Number /= 10;
    }

    while (i > 0) {
 756:	81 10       	cpse	r8, r1
 758:	f4 cf       	rjmp	.-24     	; 0x742 <LCD_SendNumber+0xdc>
        LCD_SendData(buffer[--i]);
    }
}
 75a:	67 96       	adiw	r28, 0x17	; 23
 75c:	0f b6       	in	r0, 0x3f	; 63
 75e:	f8 94       	cli
 760:	de bf       	out	0x3e, r29	; 62
 762:	0f be       	out	0x3f, r0	; 63
 764:	cd bf       	out	0x3d, r28	; 61
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	1f 91       	pop	r17
 76c:	0f 91       	pop	r16
 76e:	ff 90       	pop	r15
 770:	ef 90       	pop	r14
 772:	df 90       	pop	r13
 774:	cf 90       	pop	r12
 776:	bf 90       	pop	r11
 778:	af 90       	pop	r10
 77a:	9f 90       	pop	r9
 77c:	8f 90       	pop	r8
 77e:	7f 90       	pop	r7
 780:	6f 90       	pop	r6
 782:	5f 90       	pop	r5
 784:	4f 90       	pop	r4
 786:	3f 90       	pop	r3
 788:	2f 90       	pop	r2
 78a:	08 95       	ret

0000078c <LED_init>:
	
}

void LED_OFF(uint8_t port , uint8_t pinNumber){
	
	DIO_write(port,pinNumber,LOW);
 78c:	41 e0       	ldi	r20, 0x01	; 1
 78e:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_init>
 792:	08 95       	ret

00000794 <LED_TOGGLE>:
}

void LED_TOGGLE(uint8_t port , uint8_t pinNumber){
	
	DIO_toggle(port,pinNumber);
 794:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_toggle>
 798:	08 95       	ret

0000079a <EXTI0_callback>:
/* shared counter */
volatile uint8_t g_counter = 1; /* counts 1..9 */

void EXTI0_callback(void) {
    /* toggle LED connected to PORTB, pin 0 */
    LED_TOGGLE(PORT_A, 4);
 79a:	64 e0       	ldi	r22, 0x04	; 4
 79c:	81 e4       	ldi	r24, 0x41	; 65
 79e:	0e 94 ca 03 	call	0x794	; 0x794 <LED_TOGGLE>
 7a2:	08 95       	ret

000007a4 <EXTI1_callback>:
}

void EXTI1_callback(void) {
    /* reset counter to 1 */
    g_counter = 1;
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    /* update displays immediately (safe-ish from ISR - but minimal work) */
    /* best practice: set a flag and update in main loop, but small update ok: */
    Sev_DisplayNumber(g_counter);
 7aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7ae:	0e 94 60 00 	call	0xc0	; 0xc0 <Sev_DisplayNumber>
    LCD_ClearScreen();
 7b2:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_ClearScreen>
    LCD_SendNumber(g_counter);
 7b6:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	40 e0       	ldi	r20, 0x00	; 0
 7be:	50 e0       	ldi	r21, 0x00	; 0
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	70 e0       	ldi	r23, 0x00	; 0
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 33 03 	call	0x666	; 0x666 <LCD_SendNumber>
 7cc:	08 95       	ret

000007ce <main>:
}

int main(void)
{
    /* init drivers */
    LED_init(PORT_A, 4);      // LED on PA4
 7ce:	64 e0       	ldi	r22, 0x04	; 4
 7d0:	81 e4       	ldi	r24, 0x41	; 65
 7d2:	0e 94 c6 03 	call	0x78c	; 0x78c <LED_init>
    Sev_Init();               // 7-seg on PC0..PC6
 7d6:	0e 94 49 00 	call	0x92	; 0x92 <Sev_Init>
    LCD_Init();               // your LCD config determines pins
 7da:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_Init>
    
    /* display startup */
    LCD_SendString((uint8_t*)"EXTI Demo");
 7de:	8b e6       	ldi	r24, 0x6B	; 107
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	0e 94 26 03 	call	0x64c	; 0x64c <LCD_SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7e6:	2f ef       	ldi	r18, 0xFF	; 255
 7e8:	89 e6       	ldi	r24, 0x69	; 105
 7ea:	98 e1       	ldi	r25, 0x18	; 24
 7ec:	21 50       	subi	r18, 0x01	; 1
 7ee:	80 40       	sbci	r24, 0x00	; 0
 7f0:	90 40       	sbci	r25, 0x00	; 0
 7f2:	e1 f7       	brne	.-8      	; 0x7ec <main+0x1e>
 7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <main+0x28>
 7f6:	00 00       	nop
    _delay_ms(1000);
    LCD_ClearScreen();
 7f8:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_ClearScreen>

    /* EXTI setup */
    EXTI0_voidInit(EXTI_FALLING_EDGE); /* INT0 (PD2) falling edge toggles LED */
 7fc:	82 e0       	ldi	r24, 0x02	; 2
 7fe:	0e 94 a6 01 	call	0x34c	; 0x34c <EXTI0_voidInit>
    EXTI0_voidSetCallBack(EXTI0_callback);
 802:	8d ec       	ldi	r24, 0xCD	; 205
 804:	93 e0       	ldi	r25, 0x03	; 3
 806:	0e 94 c9 01 	call	0x392	; 0x392 <EXTI0_voidSetCallBack>
    EXTI0_voidEnable();
 80a:	0e 94 c4 01 	call	0x388	; 0x388 <EXTI0_voidEnable>

    EXTI1_voidInit(EXTI_FALLING_EDGE); /* INT1 (PD3) falling edge resets counter */
 80e:	82 e0       	ldi	r24, 0x02	; 2
 810:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EXTI1_voidInit>
    EXTI1_voidSetCallBack(EXTI1_callback);
 814:	82 ed       	ldi	r24, 0xD2	; 210
 816:	93 e0       	ldi	r25, 0x03	; 3
 818:	0e 94 1a 02 	call	0x434	; 0x434 <EXTI1_voidSetCallBack>
    EXTI1_voidEnable();
 81c:	0e 94 15 02 	call	0x42a	; 0x42a <EXTI1_voidEnable>

    /* ensure initial display */
    Sev_DisplayNumber(g_counter);
 820:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 824:	0e 94 60 00 	call	0xc0	; 0xc0 <Sev_DisplayNumber>
    LCD_SendNumber(g_counter);
 828:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	40 e0       	ldi	r20, 0x00	; 0
 830:	50 e0       	ldi	r21, 0x00	; 0
 832:	60 e0       	ldi	r22, 0x00	; 0
 834:	70 e0       	ldi	r23, 0x00	; 0
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 33 03 	call	0x666	; 0x666 <LCD_SendNumber>
 83e:	2f ef       	ldi	r18, 0xFF	; 255
 840:	86 e1       	ldi	r24, 0x16	; 22
 842:	91 e1       	ldi	r25, 0x11	; 17
 844:	21 50       	subi	r18, 0x01	; 1
 846:	80 40       	sbci	r24, 0x00	; 0
 848:	90 40       	sbci	r25, 0x00	; 0
 84a:	e1 f7       	brne	.-8      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 84c:	00 c0       	rjmp	.+0      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 84e:	00 00       	nop
    while (1)
    {
        /* increment 1..9 with delay; no timers used */
        _delay_ms(700);
        /* increment counter atomically */
        cli();
 850:	f8 94       	cli
        if (g_counter >= 9) g_counter = 1;
 852:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 856:	89 30       	cpi	r24, 0x09	; 9
 858:	20 f0       	brcs	.+8      	; 0x862 <__stack+0x3>
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 860:	05 c0       	rjmp	.+10     	; 0x86c <__stack+0xd>
        else g_counter++;
 862:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 866:	8f 5f       	subi	r24, 0xFF	; 255
 868:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
        sei();
 86c:	78 94       	sei

        /* update displays */
        Sev_DisplayNumber(g_counter);
 86e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 872:	0e 94 60 00 	call	0xc0	; 0xc0 <Sev_DisplayNumber>
        LCD_ClearScreen();
 876:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_ClearScreen>
        LCD_SendString((uint8_t*)"Count: ");
 87a:	85 e7       	ldi	r24, 0x75	; 117
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 26 03 	call	0x64c	; 0x64c <LCD_SendString>
        LCD_SendNumber(g_counter);
 882:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 886:	30 e0       	ldi	r19, 0x00	; 0
 888:	40 e0       	ldi	r20, 0x00	; 0
 88a:	50 e0       	ldi	r21, 0x00	; 0
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	70 e0       	ldi	r23, 0x00	; 0
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 33 03 	call	0x666	; 0x666 <LCD_SendNumber>
    }
 898:	d2 cf       	rjmp	.-92     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>

0000089a <__umoddi3>:
 89a:	68 94       	set
 89c:	01 c0       	rjmp	.+2      	; 0x8a0 <__udivdi3_umoddi3>

0000089e <__udivdi3>:
 89e:	e8 94       	clt

000008a0 <__udivdi3_umoddi3>:
 8a0:	8f 92       	push	r8
 8a2:	9f 92       	push	r9
 8a4:	cf 93       	push	r28
 8a6:	df 93       	push	r29
 8a8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__udivmod64>
 8ac:	df 91       	pop	r29
 8ae:	cf 91       	pop	r28
 8b0:	9f 90       	pop	r9
 8b2:	8f 90       	pop	r8
 8b4:	08 95       	ret

000008b6 <__udivmod64>:
 8b6:	88 24       	eor	r8, r8
 8b8:	99 24       	eor	r9, r9
 8ba:	f4 01       	movw	r30, r8
 8bc:	e4 01       	movw	r28, r8
 8be:	b0 e4       	ldi	r27, 0x40	; 64
 8c0:	9f 93       	push	r25
 8c2:	aa 27       	eor	r26, r26
 8c4:	9a 15       	cp	r25, r10
 8c6:	8b 04       	cpc	r8, r11
 8c8:	9c 04       	cpc	r9, r12
 8ca:	ed 05       	cpc	r30, r13
 8cc:	fe 05       	cpc	r31, r14
 8ce:	cf 05       	cpc	r28, r15
 8d0:	d0 07       	cpc	r29, r16
 8d2:	a1 07       	cpc	r26, r17
 8d4:	98 f4       	brcc	.+38     	; 0x8fc <__udivmod64+0x46>
 8d6:	ad 2f       	mov	r26, r29
 8d8:	dc 2f       	mov	r29, r28
 8da:	cf 2f       	mov	r28, r31
 8dc:	fe 2f       	mov	r31, r30
 8de:	e9 2d       	mov	r30, r9
 8e0:	98 2c       	mov	r9, r8
 8e2:	89 2e       	mov	r8, r25
 8e4:	98 2f       	mov	r25, r24
 8e6:	87 2f       	mov	r24, r23
 8e8:	76 2f       	mov	r23, r22
 8ea:	65 2f       	mov	r22, r21
 8ec:	54 2f       	mov	r21, r20
 8ee:	43 2f       	mov	r20, r19
 8f0:	32 2f       	mov	r19, r18
 8f2:	22 27       	eor	r18, r18
 8f4:	b8 50       	subi	r27, 0x08	; 8
 8f6:	31 f7       	brne	.-52     	; 0x8c4 <__udivmod64+0xe>
 8f8:	bf 91       	pop	r27
 8fa:	27 c0       	rjmp	.+78     	; 0x94a <__udivmod64+0x94>
 8fc:	1b 2e       	mov	r1, r27
 8fe:	bf 91       	pop	r27
 900:	bb 27       	eor	r27, r27
 902:	22 0f       	add	r18, r18
 904:	33 1f       	adc	r19, r19
 906:	44 1f       	adc	r20, r20
 908:	55 1f       	adc	r21, r21
 90a:	66 1f       	adc	r22, r22
 90c:	77 1f       	adc	r23, r23
 90e:	88 1f       	adc	r24, r24
 910:	99 1f       	adc	r25, r25
 912:	88 1c       	adc	r8, r8
 914:	99 1c       	adc	r9, r9
 916:	ee 1f       	adc	r30, r30
 918:	ff 1f       	adc	r31, r31
 91a:	cc 1f       	adc	r28, r28
 91c:	dd 1f       	adc	r29, r29
 91e:	aa 1f       	adc	r26, r26
 920:	bb 1f       	adc	r27, r27
 922:	8a 14       	cp	r8, r10
 924:	9b 04       	cpc	r9, r11
 926:	ec 05       	cpc	r30, r12
 928:	fd 05       	cpc	r31, r13
 92a:	ce 05       	cpc	r28, r14
 92c:	df 05       	cpc	r29, r15
 92e:	a0 07       	cpc	r26, r16
 930:	b1 07       	cpc	r27, r17
 932:	48 f0       	brcs	.+18     	; 0x946 <__udivmod64+0x90>
 934:	8a 18       	sub	r8, r10
 936:	9b 08       	sbc	r9, r11
 938:	ec 09       	sbc	r30, r12
 93a:	fd 09       	sbc	r31, r13
 93c:	ce 09       	sbc	r28, r14
 93e:	df 09       	sbc	r29, r15
 940:	a0 0b       	sbc	r26, r16
 942:	b1 0b       	sbc	r27, r17
 944:	21 60       	ori	r18, 0x01	; 1
 946:	1a 94       	dec	r1
 948:	e1 f6       	brne	.-72     	; 0x902 <__udivmod64+0x4c>
 94a:	2e f4       	brtc	.+10     	; 0x956 <__udivmod64+0xa0>
 94c:	94 01       	movw	r18, r8
 94e:	af 01       	movw	r20, r30
 950:	be 01       	movw	r22, r28
 952:	cd 01       	movw	r24, r26
 954:	00 0c       	add	r0, r0
 956:	08 95       	ret

00000958 <__cmpdi2_s8>:
 958:	00 24       	eor	r0, r0
 95a:	a7 fd       	sbrc	r26, 7
 95c:	00 94       	com	r0
 95e:	2a 17       	cp	r18, r26
 960:	30 05       	cpc	r19, r0
 962:	40 05       	cpc	r20, r0
 964:	50 05       	cpc	r21, r0
 966:	60 05       	cpc	r22, r0
 968:	70 05       	cpc	r23, r0
 96a:	80 05       	cpc	r24, r0
 96c:	90 05       	cpc	r25, r0
 96e:	08 95       	ret

00000970 <_exit>:
 970:	f8 94       	cli

00000972 <__stop_program>:
 972:	ff cf       	rjmp	.-2      	; 0x972 <__stop_program>
